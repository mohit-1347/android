#include <bits/stdc++.h>
using namespace std;

struct Job
{
    int id;
    int dead;
    int profit;
};

class Solution
{
public:
    // Comparator function for sorting jobs in non-increasing order of profit
    static bool comparison(Job a, Job b)
    {
        return (a.profit > b.profit);
    }

    // Function to find the maximum profit and the number of jobs done
    pair<int, int> JobScheduling(Job arr[], int n)
    {
        sort(arr, arr + n, comparison); // Sorting the jobs in non-increasing order of profit

        // Finding the maximum deadline among the jobs
        int maxi = arr[0].dead;
        for (int i = 1; i < n; i++)
        {
            maxi = max(maxi, arr[i].dead);
        }

        // Array to keep track of available slots for jobs
        int slot[maxi + 1];

        // Initializing all slots as available (-1 indicates no job scheduled)
        for (int i = 0; i <= maxi; i++)
            slot[i] = -1;

        int countJobs = 0, jobProfit = 0;

        // Assigning jobs to available slots
        for (int i = 0; i < n; i++)
        {
            for (int j = arr[i].dead; j > 0; j--)
            {
                if (slot[j] == -1)
                {
                    slot[j] = i;                // Assigning the job to this slot
                    countJobs++;                // Incrementing the count of jobs
                    jobProfit += arr[i].profit; // Adding the profit of this job
                    break;                      // Move to the next job
                }
            }
        }

        return make_pair(countJobs, jobProfit); // Returning the total count of jobs and the total profit
    }
};

int main()
{
    int n;
    cout << "Enter the number of jobs: ";
    cin >> n;

    Job arr[n];
    cout << "Enter job details (id, deadline, profit) for each job:" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << "Job " << i + 1 << ":" << endl;
        cin >> arr[i].id >> arr[i].dead >> arr[i].profit; // Taking input for each job
    }

    Solution ob;
    // Function call to find the maximum profit and the number of jobs done
    pair<int, int> ans = ob.JobScheduling(arr, n);
    cout << "Maximum number of jobs done: " << ans.first << endl; // Outputting the maximum number of jobs done
    cout << "Maximum profit earned: " << ans.second << endl;      // Outputting the maximum profit earned

    return 0;
}
