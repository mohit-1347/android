#include <iostream>
#include <string>

using namespace std;

// Function to implement Rabin-Karp algorithm for pattern searching
void rabinKarpAlgo(string &pattern, string &text, int q)
{
    int m = pattern.size(); // Size of pattern
    int n = text.size();    // Size of text
    int i, j, hash_p = 0, hash_t = 0, h = 1, d = m + n;

    // Calculate (d^(m-1))%q
    for (i = 0; i < m - 1; i++)
    {
        h = (h * d) % q;
    }

    // Calculate hash value for pattern and text
    for (i = 0; i < m; i++)
    {
        hash_p = (pattern[i] + d * hash_p) % q;
        hash_t = (text[i] + d * hash_t) % q;
    }

    // Find the match
    for (i = 0; i <= n - m; i++)
    {
        // Check the hash values of current windows of text and pattern.
        if (hash_p == hash_t)
        {
            for (j = 0; j < m; j++)
            {
                if (text[i + j] != pattern[j])
                    break;
            }
            // If pattern == text
            if (j == m)
                cout << "Pattern is found at index : " << i << "\n";
        }
        // Calculate the hash value for next window : adding trailing digit
        // and remove leading digit
        if (i < n - m)
        {
            hash_t = (d * (hash_t - text[i] * h) + text[i + m]) % q;
            // Converting negative value of hash_t to positive.
            if (hash_t < 0)
                hash_t = (hash_t + q);
        }
    }
}

int main()
{
    string text, pattern;
    int q;

    cout << "Enter the text: ";
    getline(cin, text);

    cout << "Enter the pattern to search for: ";
    getline(cin, pattern);

    cout << "Enter the prime number (q): ";
    cin >> q;

    rabinKarpAlgo(pattern, text, q);

    return 0;
}
