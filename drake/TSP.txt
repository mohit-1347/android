#include <iostream>
#include <bits/stdc++.h>
#include <chrono>

using namespace std;

#define V 10

pair<int, vector<int>> travelingSalesmanProblem(int graph[][V], int n) {
    vector<int> vertex;
    for(int i = 1; i < n; i++)
        vertex.push_back(i);

    int min_path = numeric_limits<int>::max();
    vector<int> min_path_vertex;

    do {
        int current_pathweight = 0;
        int k = 0;
        for(int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][0];

        if (current_pathweight < min_path) {
            min_path = current_pathweight;
            min_path_vertex = vertex;
        }
    } while (next_permutation(vertex.begin(), vertex.end()));

    min_path_vertex.insert(min_path_vertex.begin(), 0);
    min_path_vertex.push_back(0);

    return {min_path, min_path_vertex};
}

int main() {
    int n;
    cout << "TRAVELLING SALESMAN PROBLEM" << endl;
    cout << "Enter the number of Cities: ";
    cin >> n;

    int graph[V][V];
    cout << "Enter the adjacency matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    auto start = chrono::steady_clock::now();
    auto result = travelingSalesmanProblem(graph, n);
    auto end = chrono::steady_clock::now();
    auto duration = chrono::duration_cast<chrono::microseconds>(end - start);

    cout << "\nMinimum cost of the path is: " << result.first << endl;
    cout << "Optimal Path is: ";
    for (int i = 0; i < result.second.size(); i++) {
        cout << result.second[i] + 1;
        if (i != result.second.size() - 1) {
            cout << "-->";
        }
    }
    cout << endl;
    cout << "\nTime Elapsed: " << duration.count() << " microseconds" << endl << endl;

    return 0;
}
